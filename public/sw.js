// Doraemon Movies Service Worker for PWA capabilities\nconst CACHE_NAME = 'doraemon-movies-v1';\nconst STATIC_CACHE_URLS = [\n  '/',\n  '/static/css/doraemon-theme.css',\n  '/static/js/main.js',\n  '/static/js/blog.js', \n  '/static/js/watch.js',\n  '/static/js/monetization.js',\n  '/static/images/doraemon-logo.png',\n  '/static/images/doraemon-hero.png',\n  '/static/images/placeholder-movie.jpg',\n  '/static/images/favicon.ico'\n];\n\n// Install event - cache static resources\nself.addEventListener('install', (event) => {\n  console.log('🤖 Service Worker installing...');\n  \n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('📦 Caching static resources');\n        return cache.addAll(STATIC_CACHE_URLS.map(url => new Request(url, { credentials: 'same-origin' })));\n      })\n      .then(() => {\n        console.log('✅ Service Worker installed successfully');\n        return self.skipWaiting();\n      })\n      .catch((error) => {\n        console.error('❌ Service Worker installation failed:', error);\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('🔄 Service Worker activating...');\n  \n  event.waitUntil(\n    caches.keys()\n      .then((cacheNames) => {\n        return Promise.all(\n          cacheNames\n            .filter((cacheName) => {\n              // Delete old caches that don't match current version\n              return cacheName !== CACHE_NAME && cacheName.startsWith('doraemon-movies-');\n            })\n            .map((cacheName) => {\n              console.log('🗑️ Deleting old cache:', cacheName);\n              return caches.delete(cacheName);\n            })\n        );\n      })\n      .then(() => {\n        console.log('✅ Service Worker activated');\n        return self.clients.claim();\n      })\n  );\n});\n\n// Fetch event - serve from cache with network fallback\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Skip cross-origin requests\n  if (url.origin !== self.location.origin) {\n    return;\n  }\n  \n  // Skip API requests and admin routes\n  if (url.pathname.startsWith('/api/') || url.pathname.startsWith('/admin')) {\n    return;\n  }\n  \n  event.respondWith(\n    caches.match(request)\n      .then((cachedResponse) => {\n        // Return cached version if available\n        if (cachedResponse) {\n          // Update cache in background for static resources\n          if (STATIC_CACHE_URLS.includes(url.pathname)) {\n            event.waitUntil(\n              fetch(request)\n                .then((networkResponse) => {\n                  if (networkResponse && networkResponse.status === 200) {\n                    const responseClone = networkResponse.clone();\n                    caches.open(CACHE_NAME)\n                      .then((cache) => {\n                        cache.put(request, responseClone);\n                      });\n                  }\n                })\n                .catch(() => {\n                  // Network failed, but we have cached version\n                })\n            );\n          }\n          return cachedResponse;\n        }\n        \n        // Try network first for dynamic content\n        return fetch(request)\n          .then((networkResponse) => {\n            // Cache successful responses for static resources\n            if (networkResponse && networkResponse.status === 200) {\n              if (STATIC_CACHE_URLS.includes(url.pathname) || \n                  url.pathname.match(/\\.(css|js|png|jpg|jpeg|gif|ico|svg)$/)) {\n                const responseClone = networkResponse.clone();\n                caches.open(CACHE_NAME)\n                  .then((cache) => {\n                    cache.put(request, responseClone);\n                  });\n              }\n            }\n            return networkResponse;\n          })\n          .catch(() => {\n            // Network failed and no cache available\n            if (request.mode === 'navigate') {\n              // Return offline page for navigation requests\n              return caches.match('/') || new Response(\n                '<!DOCTYPE html><html><head><title>Offline - Doraemon Movies</title></head><body><h1>You are offline</h1><p>Please check your internet connection and try again.</p></body></html>',\n                { headers: { 'Content-Type': 'text/html' } }\n              );\n            }\n            \n            // Return placeholder for images\n            if (request.destination === 'image') {\n              return caches.match('/static/images/placeholder-movie.jpg');\n            }\n            \n            // Return network error for other requests\n            return new Response('Network Error', {\n              status: 408,\n              statusText: 'Network Error'\n            });\n          });\n      })\n  );\n});\n\n// Background sync for analytics (when implemented)\nself.addEventListener('sync', (event) => {\n  console.log('🔄 Background sync:', event.tag);\n  \n  if (event.tag === 'analytics-sync') {\n    event.waitUntil(\n      // Sync pending analytics data when back online\n      syncAnalytics()\n    );\n  }\n});\n\n// Push notifications (future feature)\nself.addEventListener('push', (event) => {\n  console.log('📱 Push notification received:', event);\n  \n  if (event.data) {\n    const data = event.data.json();\n    const title = data.title || 'Doraemon Movies';\n    const options = {\n      body: data.body || 'New content available!',\n      icon: '/static/images/doraemon-logo.png',\n      badge: '/static/images/favicon.ico',\n      data: data.url || '/',\n      actions: [\n        {\n          action: 'open',\n          title: 'Open',\n          icon: '/static/images/doraemon-logo.png'\n        },\n        {\n          action: 'close',\n          title: 'Close'\n        }\n      ]\n    };\n    \n    event.waitUntil(\n      self.registration.showNotification(title, options)\n    );\n  }\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  console.log('📱 Notification clicked:', event);\n  \n  event.notification.close();\n  \n  if (event.action === 'open') {\n    const url = event.notification.data || '/';\n    event.waitUntil(\n      clients.openWindow(url)\n    );\n  }\n});\n\n// Helper function to sync analytics data\nasync function syncAnalytics() {\n  try {\n    // This would sync any pending analytics data stored in IndexedDB\n    console.log('📊 Syncing analytics data...');\n    \n    // Implementation would go here to:\n    // 1. Get pending analytics events from IndexedDB\n    // 2. Send them to /api/analytics/batch\n    // 3. Clear them from local storage on success\n    \n    console.log('✅ Analytics sync completed');\n  } catch (error) {\n    console.error('❌ Analytics sync failed:', error);\n  }\n}\n\n// Log service worker info\nconsole.log('🤖 Doraemon Movies Service Worker loaded');\nconsole.log('📦 Cache name:', CACHE_NAME);\nconsole.log('🗂️ Caching URLs:', STATIC_CACHE_URLS);