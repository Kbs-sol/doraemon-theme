// Enhanced Video Player with Telegram Integration
let currentMovie = null;
let videoSources = [];
let currentSource = null;
let adUnlockTimer = 30; // Default 30 seconds
let unlockCountdown = null;

document.addEventListener('DOMContentLoaded', function() {
    if (window.movieSlug) {
        loadMovieAndSources(window.movieSlug);
    }
    
    // Track page view
    trackAnalytics('video_view', window.location.href);
});

async function loadMovieAndSources(slug) {
    try {
        showLoading('Loading movie information...');
        
        const response = await axios.get(`/api/movies/${slug}/video-sources`);
        
        if (response.data.success) {
            currentMovie = response.data.movie;
            videoSources = response.data.sources;
            
            updateMovieInfo();
            showVideoSources();
        } else {
            showError('Movie not found or unavailable');
        }
    } catch (error) {
        console.error('Error loading movie:', error);
        showError('Failed to load movie. Please try again.');
    }
}\n\nfunction updateMovieInfo() {\n    const movieInfoContainer = document.getElementById('movie-info');\n    \n    movieInfoContainer.innerHTML = `\n        <div class=\"flex items-start space-x-6\">\n            ${currentMovie.poster_url ? \n                `<img src=\"${currentMovie.poster_url}\" alt=\"${currentMovie.title}\" class=\"w-48 h-64 object-cover rounded-lg shadow-lg\">` :\n                '<div class=\"w-48 h-64 bg-gray-700 rounded-lg flex items-center justify-center\"><i class=\"fas fa-film text-4xl text-gray-500\"></i></div>'\n            }\n            <div class=\"flex-1\">\n                <h1 class=\"text-3xl font-bold text-white mb-4\">${currentMovie.title}</h1>\n                ${currentMovie.summary ? `<p class=\"text-gray-300 mb-6 leading-relaxed\">${currentMovie.summary}</p>` : ''}\n                \n                <div class=\"flex items-center space-x-4 mb-6\">\n                    <div class=\"flex items-center text-sm text-gray-400\">\n                        <i class=\"fas fa-play-circle mr-2\"></i>\n                        <span>${videoSources.length} source(s) available</span>\n                    </div>\n                    <div class=\"flex items-center text-sm text-gray-400\">\n                        <i class=\"fas fa-shield-alt mr-2\"></i>\n                        <span>Secure streaming</span>\n                    </div>\n                </div>\n                \n                <div class=\"space-y-3\">\n                    ${videoSources.map((source, index) => `\n                        <div class=\"flex items-center justify-between bg-gray-800 rounded-lg p-4\">\n                            <div class=\"flex items-center space-x-3\">\n                                <div class=\"w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center\">\n                                    <i class=\"fas ${getSourceIcon(source.type)} text-white\"></i>\n                                </div>\n                                <div>\n                                    <h3 class=\"text-white font-medium\">${getSourceName(source.type)}</h3>\n                                    <p class=\"text-sm text-gray-400\">${source.quality} Quality</p>\n                                </div>\n                            </div>\n                            <button \n                                onclick=\"selectVideoSource(${index})\"\n                                class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                                ${source.requires_unlock ? 'id=\"unlock-button-' + index + '\" disabled' : ''}\n                            >\n                                ${source.requires_unlock ? 'Unlock Video' : 'Play Now'}\n                            </button>\n                        </div>\n                    `).join('')}\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Start unlock timer for sources that require it\n    videoSources.forEach((source, index) => {\n        if (source.requires_unlock) {\n            startUnlockTimer(index);\n        }\n    });\n}\n\nfunction showVideoSources() {\n    const videoContainer = document.getElementById('video-container');\n    \n    if (videoSources.length === 0) {\n        videoContainer.innerHTML = `\n            <div class=\"bg-gray-900 rounded-lg p-8 text-center\">\n                <i class=\"fas fa-exclamation-triangle text-4xl text-yellow-500 mb-4\"></i>\n                <h3 class=\"text-xl font-bold text-white mb-2\">No Video Sources Available</h3>\n                <p class=\"text-gray-400\">This movie is currently being processed. Please check back later.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    // Show source selection interface\n    videoContainer.innerHTML = `\n        <div class=\"bg-gray-900 rounded-lg p-8 text-center\">\n            <i class=\"fas fa-play-circle text-6xl text-blue-500 mb-4\"></i>\n            <h3 class=\"text-2xl font-bold text-white mb-2\">Ready to Watch</h3>\n            <p class=\"text-gray-400 mb-6\">Choose a video source to start streaming</p>\n            <div class=\"flex justify-center\">\n                <div class=\"text-sm text-gray-500\">\n                    <i class=\"fas fa-info-circle mr-2\"></i>\n                    Video will start after ad timer completion\n                </div>\n            </div>\n        </div>\n    `;\n}\n\nfunction startUnlockTimer(sourceIndex) {\n    const button = document.getElementById(`unlock-button-${sourceIndex}`);\n    if (!button) return;\n    \n    let timeLeft = adUnlockTimer;\n    \n    const updateButton = () => {\n        if (timeLeft > 0) {\n            button.textContent = `Unlock in ${timeLeft}s`;\n            button.disabled = true;\n            timeLeft--;\n        } else {\n            button.textContent = 'Play Now';\n            button.disabled = false;\n            button.classList.remove('bg-gray-600');\n            button.classList.add('bg-green-600', 'hover:bg-green-700');\n            \n            // Track unlock completion\n            trackAnalytics('ad_unlock_complete', window.location.href, null, currentMovie.id);\n        }\n    };\n    \n    updateButton();\n    unlockCountdown = setInterval(updateButton, 1000);\n    \n    // Track unlock start\n    trackAnalytics('ad_unlock_start', window.location.href, null, currentMovie.id);\n}\n\nasync function selectVideoSource(sourceIndex) {\n    const source = videoSources[sourceIndex];\n    if (!source) return;\n    \n    currentSource = source;\n    \n    // Track source selection\n    trackAnalytics('video_source_selected', window.location.href, null, currentMovie.id);\n    \n    try {\n        if (source.type === 'telegram') {\n            await loadTelegramVideo(source);\n        } else {\n            await loadStandardVideo(source);\n        }\n    } catch (error) {\n        console.error('Error loading video:', error);\n        showVideoError('Failed to load video. Please try another source.');\n    }\n}\n\nasync function loadTelegramVideo(source) {\n    showLoading('Requesting secure video stream...');\n    \n    try {\n        const response = await axios.post('/api/telegram/get-file-url', {\n            file_id: source.file_id,\n            movie_slug: currentMovie.slug\n        });\n        \n        if (response.data.success) {\n            const videoData = response.data;\n            \n            // Create secure video player\n            createSecureVideoPlayer({\n                url: videoData.video_url,\n                fallbackUrl: videoData.direct_url,\n                expiresAt: videoData.expires_at,\n                fileSize: videoData.file_size\n            });\n            \n            // Track successful stream start\n            trackAnalytics('telegram_stream_start', window.location.href, null, currentMovie.id);\n        } else {\n            throw new Error(response.data.error || 'Failed to get video stream');\n        }\n    } catch (error) {\n        console.error('Telegram video error:', error);\n        showVideoError('Unable to access Telegram video. Please try another source.');\n    }\n}\n\nasync function loadStandardVideo(source) {\n    showLoading('Loading video player...');\n    \n    try {\n        if (source.type === 'youtube') {\n            createYouTubePlayer(source.url);\n        } else if (source.type === 'archive') {\n            createArchivePlayer(source.url);\n        } else {\n            createGenericVideoPlayer(source.url);\n        }\n        \n        // Track standard stream start\n        trackAnalytics('standard_stream_start', window.location.href, null, currentMovie.id);\n    } catch (error) {\n        console.error('Standard video error:', error);\n        showVideoError('Unable to load video player.');\n    }\n}\n\nfunction createSecureVideoPlayer(videoData) {\n    const videoContainer = document.getElementById('video-container');\n    \n    videoContainer.innerHTML = `\n        <div class=\"relative bg-black rounded-lg overflow-hidden shadow-2xl\">\n            <video \n                id=\"secure-video-player\"\n                class=\"w-full h-auto\"\n                controls\n                preload=\"metadata\"\n                poster=\"${currentMovie.poster_url || ''}\"\n                onloadstart=\"handleVideoLoadStart()\"\n                onloadeddata=\"handleVideoLoaded()\"\n                onerror=\"handleVideoError()\"\n                onplay=\"handleVideoPlay()\"\n                onpause=\"handleVideoPause()\"\n            >\n                <source src=\"${videoData.url}\" type=\"video/mp4\">\n                ${videoData.fallbackUrl ? `<source src=\"${videoData.fallbackUrl}\" type=\"video/mp4\">` : ''}\n                Your browser does not support the video tag.\n            </video>\n            \n            <!-- Security Overlay -->\n            <div class=\"absolute top-4 right-4 bg-black bg-opacity-75 rounded px-3 py-2\">\n                <div class=\"flex items-center text-xs text-white\">\n                    <i class=\"fas fa-lock mr-2 text-green-400\"></i>\n                    <span>Secure Stream</span>\n                </div>\n            </div>\n            \n            <!-- Expiry Notice -->\n            <div class=\"absolute bottom-4 left-4 bg-black bg-opacity-75 rounded px-3 py-2\">\n                <div class=\"flex items-center text-xs text-white\">\n                    <i class=\"fas fa-clock mr-2 text-yellow-400\"></i>\n                    <span id=\"stream-expiry\">Expires: ${formatExpiryTime(videoData.expiresAt)}</span>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Video Info -->\n        <div class=\"mt-4 bg-gray-800 rounded-lg p-4\">\n            <div class=\"flex items-center justify-between text-sm text-gray-400\">\n                <div class=\"flex items-center space-x-4\">\n                    <span><i class=\"fas fa-file-video mr-1\"></i> ${formatFileSize(videoData.fileSize)}</span>\n                    <span><i class=\"fas fa-shield-alt mr-1\"></i> Encrypted Stream</span>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <button onclick=\"reportVideo()\" class=\"text-red-400 hover:text-red-300\">\n                        <i class=\"fas fa-flag mr-1\"></i> Report\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Start expiry countdown\n    startExpiryCountdown(videoData.expiresAt);\n}\n\nfunction createYouTubePlayer(embedUrl) {\n    const videoContainer = document.getElementById('video-container');\n    \n    // Extract video ID from URL\n    const videoId = extractYouTubeId(embedUrl);\n    if (!videoId) {\n        showVideoError('Invalid YouTube URL');\n        return;\n    }\n    \n    videoContainer.innerHTML = `\n        <div class=\"relative bg-black rounded-lg overflow-hidden shadow-2xl aspect-video\">\n            <iframe \n                src=\"https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0&modestbranding=1\"\n                class=\"w-full h-full\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n                onload=\"handleVideoLoaded()\"\n            ></iframe>\n        </div>\n    `;\n}\n\nfunction createArchivePlayer(videoUrl) {\n    const videoContainer = document.getElementById('video-container');\n    \n    videoContainer.innerHTML = `\n        <div class=\"relative bg-black rounded-lg overflow-hidden shadow-2xl\">\n            <video \n                id=\"archive-video-player\"\n                class=\"w-full h-auto\"\n                controls\n                preload=\"metadata\"\n                poster=\"${currentMovie.poster_url || ''}\"\n                onloadeddata=\"handleVideoLoaded()\"\n                onerror=\"handleVideoError()\"\n            >\n                <source src=\"${videoUrl}\" type=\"video/mp4\">\n                Your browser does not support the video tag.\n            </video>\n        </div>\n    `;\n}\n\nfunction createGenericVideoPlayer(videoUrl) {\n    const videoContainer = document.getElementById('video-container');\n    \n    videoContainer.innerHTML = `\n        <div class=\"relative bg-black rounded-lg overflow-hidden shadow-2xl\">\n            <video \n                id=\"generic-video-player\"\n                class=\"w-full h-auto\"\n                controls\n                preload=\"metadata\"\n                poster=\"${currentMovie.poster_url || ''}\"\n                onloadeddata=\"handleVideoLoaded()\"\n                onerror=\"handleVideoError()\"\n            >\n                <source src=\"${videoUrl}\" type=\"video/mp4\">\n                Your browser does not support the video tag.\n            </video>\n        </div>\n    `;\n}\n\n// Video Event Handlers\nfunction handleVideoLoadStart() {\n    console.log('Video load started');\n}\n\nfunction handleVideoLoaded() {\n    console.log('Video loaded successfully');\n    trackAnalytics('video_loaded', window.location.href, null, currentMovie.id);\n}\n\nfunction handleVideoError() {\n    console.error('Video playback error');\n    showVideoError('Video playback failed. Please try refreshing the page or selecting another source.');\n    trackAnalytics('video_error', window.location.href, null, currentMovie.id);\n}\n\nfunction handleVideoPlay() {\n    console.log('Video playback started');\n    trackAnalytics('video_play', window.location.href, null, currentMovie.id);\n}\n\nfunction handleVideoPause() {\n    console.log('Video playback paused');\n    trackAnalytics('video_pause', window.location.href, null, currentMovie.id);\n}\n\n// Utility Functions\nfunction getSourceIcon(type) {\n    const icons = {\n        youtube: 'fa-youtube',\n        telegram: 'fa-telegram',\n        archive: 'fa-archive',\n        drive: 'fa-google-drive',\n        default: 'fa-play'\n    };\n    return icons[type] || icons.default;\n}\n\nfunction getSourceName(type) {\n    const names = {\n        youtube: 'YouTube',\n        telegram: 'Telegram Stream',\n        archive: 'Internet Archive',\n        drive: 'Google Drive',\n        default: 'Video Source'\n    };\n    return names[type] || names.default;\n}\n\nfunction extractYouTubeId(url) {\n    const patterns = [\n        /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/watch\\?v=([a-zA-Z0-9_-]+)/,\n        /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([a-zA-Z0-9_-]+)/,\n        /(?:https?:\\/\\/)?youtu\\.be\\/([a-zA-Z0-9_-]+)/\n    ];\n    \n    for (const pattern of patterns) {\n        const match = url.match(pattern);\n        if (match) return match[1];\n    }\n    \n    return null;\n}\n\nfunction formatFileSize(bytes) {\n    if (!bytes) return 'Unknown size';\n    \n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    \n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n}\n\nfunction formatExpiryTime(expiresAt) {\n    const expiry = new Date(expiresAt);\n    return expiry.toLocaleTimeString();\n}\n\nfunction startExpiryCountdown(expiresAt) {\n    const expiryElement = document.getElementById('stream-expiry');\n    if (!expiryElement) return;\n    \n    const updateCountdown = () => {\n        const now = new Date().getTime();\n        const expiry = new Date(expiresAt).getTime();\n        const timeLeft = expiry - now;\n        \n        if (timeLeft > 0) {\n            const minutes = Math.floor(timeLeft / (1000 * 60));\n            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\n            expiryElement.textContent = `Expires in: ${minutes}:${seconds.toString().padStart(2, '0')}`;\n        } else {\n            expiryElement.textContent = 'Stream expired';\n            expiryElement.className = 'flex items-center text-xs text-red-400';\n        }\n    };\n    \n    updateCountdown();\n    setInterval(updateCountdown, 1000);\n}\n\nfunction showLoading(message) {\n    const videoContainer = document.getElementById('video-container');\n    videoContainer.innerHTML = `\n        <div class=\"bg-gray-900 rounded-lg p-8 text-center\">\n            <i class=\"fas fa-spinner fa-spin text-4xl text-blue-500 mb-4\"></i>\n            <p class=\"text-white\">${message}</p>\n        </div>\n    `;\n}\n\nfunction showError(message) {\n    const videoContainer = document.getElementById('video-container');\n    videoContainer.innerHTML = `\n        <div class=\"bg-gray-900 rounded-lg p-8 text-center\">\n            <i class=\"fas fa-exclamation-triangle text-4xl text-red-500 mb-4\"></i>\n            <h3 class=\"text-xl font-bold text-white mb-2\">Error</h3>\n            <p class=\"text-gray-400\">${message}</p>\n            <button onclick=\"location.reload()\" class=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n                <i class=\"fas fa-refresh mr-2\"></i>Retry\n            </button>\n        </div>\n    `;\n}\n\nfunction showVideoError(message) {\n    const videoContainer = document.getElementById('video-container');\n    videoContainer.innerHTML = `\n        <div class=\"bg-gray-900 rounded-lg p-8 text-center\">\n            <i class=\"fas fa-video-slash text-4xl text-red-500 mb-4\"></i>\n            <h3 class=\"text-xl font-bold text-white mb-2\">Video Unavailable</h3>\n            <p class=\"text-gray-400 mb-4\">${message}</p>\n            <div class=\"space-x-2\">\n                <button onclick=\"location.reload()\" class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n                    <i class=\"fas fa-refresh mr-2\"></i>Retry\n                </button>\n                <button onclick=\"window.history.back()\" class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\">\n                    <i class=\"fas fa-arrow-left mr-2\"></i>Go Back\n                </button>\n            </div>\n        </div>\n    `;\n}\n\nfunction reportVideo() {\n    if (confirm('Report this video for inappropriate content?')) {\n        // Track report\n        trackAnalytics('video_reported', window.location.href, null, currentMovie.id);\n        alert('Thank you for your report. We will review this content.');\n    }\n}\n\n// Analytics Tracking\nasync function trackAnalytics(eventType, pageUrl, blogId = null, movieId = null) {\n    try {\n        await axios.post('/api/analytics', {\n            event_type: eventType,\n            page_url: pageUrl,\n            blog_id: blogId,\n            movie_id: movieId\n        });\n    } catch (error) {\n        console.error('Analytics tracking failed:', error);\n    }\n}\n\n// Disable right-click context menu on video elements\ndocument.addEventListener('contextmenu', function(e) {\n    if (e.target.tagName === 'VIDEO') {\n        e.preventDefault();\n        return false;\n    }\n});\n\n// Disable video download attempts\ndocument.addEventListener('keydown', function(e) {\n    // Disable common download shortcuts\n    if (e.ctrlKey && (e.key === 's' || e.key === 'S')) {\n        e.preventDefault();\n        return false;\n    }\n});