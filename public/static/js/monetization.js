// Enhanced Monetization System with AdSense Integration and Unlock Timer\nclass MonetizationManager {\n    constructor() {\n        this.config = {\n            adUnlockTimer: 30, // seconds\n            adsensePublisherId: 'ca-pub-XXXXXXXXXXXXXXXX',\n            adRefreshInterval: 30000, // 30 seconds\n            maxAdRefresh: 5\n        };\n        this.adRefreshCount = 0;\n        this.unlockTimers = new Map();\n        this.adViewTracking = new Map();\n        this.init();\n    }\n\n    async init() {\n        await this.loadConfiguration();\n        this.setupAdSenseIntegration();\n        this.initializeUnlockTimers();\n        this.setupAdViewTracking();\n        this.setupAdRefreshSystem();\n        console.log('Monetization system initialized');\n    }\n\n    async loadConfiguration() {\n        try {\n            const response = await axios.get('/api/config');\n            if (response.data.success) {\n                const config = response.data.config;\n                this.config.adUnlockTimer = parseInt(config.ad_unlock_timer) || 30;\n                this.config.adsensePublisherId = config.adsense_publisher_id || this.config.adsensePublisherId;\n                this.config.adRefreshInterval = parseInt(config.ad_refresh_interval) || 30000;\n                console.log('Configuration loaded:', this.config);\n            }\n        } catch (error) {\n            console.warn('Failed to load configuration, using defaults:', error);\n        }\n    }\n\n    setupAdSenseIntegration() {\n        // Update AdSense publisher ID in existing ads\n        const adElements = document.querySelectorAll('.adsbygoogle');\n        adElements.forEach(ad => {\n            if (ad.dataset.adClient !== this.config.adsensePublisherId) {\n                ad.dataset.adClient = this.config.adsensePublisherId;\n            }\n        });\n\n        // Initialize AdSense if not already loaded\n        if (typeof window.adsbygoogle === 'undefined') {\n            this.loadAdSenseScript();\n        } else {\n            this.pushExistingAds();\n        }\n    }\n\n    loadAdSenseScript() {\n        const script = document.createElement('script');\n        script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${this.config.adsensePublisherId}`;\n        script.async = true;\n        script.crossOrigin = 'anonymous';\n        script.onload = () => {\n            this.pushExistingAds();\n        };\n        document.head.appendChild(script);\n    }\n\n    pushExistingAds() {\n        const adElements = document.querySelectorAll('.adsbygoogle');\n        adElements.forEach(ad => {\n            if (!ad.dataset.adsbygoogleStatus) {\n                try {\n                    (window.adsbygoogle = window.adsbygoogle || []).push({});\n                    console.log('AdSense ad pushed:', ad);\n                } catch (e) {\n                    console.warn('Failed to push AdSense ad:', e);\n                }\n            }\n        });\n    }\n\n    initializeUnlockTimers() {\n        // Find all unlock buttons on the page\n        const unlockButtons = document.querySelectorAll('[data-unlock-timer]');\n        unlockButtons.forEach(button => {\n            const timerId = button.dataset.unlockId || Math.random().toString(36).substr(2, 9);\n            const customTimer = parseInt(button.dataset.unlockTimer) || this.config.adUnlockTimer;\n            this.startUnlockTimer(button, timerId, customTimer);\n        });\n\n        // Initialize blog page unlock timer\n        if (window.location.pathname.includes('/blog/')) {\n            this.initializeBlogUnlockTimer();\n        }\n    }\n\n    initializeBlogUnlockTimer() {\n        const watchButtonArea = document.getElementById('watch-button-area');\n        if (!watchButtonArea) return;\n\n        // Create unlock button with timer\n        const unlockButton = document.createElement('div');\n        unlockButton.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"mb-4\">\n                    <div class=\"inline-flex items-center bg-yellow-100 border border-yellow-400 text-yellow-800 px-4 py-2 rounded-lg mb-4\">\n                        <i class=\"fas fa-clock mr-2\"></i>\n                        <span>Please wait for ads to load completely before accessing the video</span>\n                    </div>\n                </div>\n                <button \n                    id=\"main-unlock-button\"\n                    class=\"px-8 py-4 bg-gray-400 text-white rounded-lg text-xl font-bold cursor-not-allowed\"\n                    disabled\n                >\n                    <i class=\"fas fa-lock mr-2\"></i>\n                    <span id=\"unlock-text\">Preparing Video...</span>\n                </button>\n                <div class=\"mt-4 text-sm text-gray-600\">\n                    <p>ðŸŽ¬ High-quality video will be available after the timer</p>\n                    <p>ðŸ’¡ This helps us keep the content free for everyone</p>\n                </div>\n            </div>\n        `;\n        \n        watchButtonArea.appendChild(unlockButton);\n        \n        // Start the main unlock timer\n        const mainButton = document.getElementById('main-unlock-button');\n        this.startUnlockTimer(mainButton, 'main-unlock', this.config.adUnlockTimer);\n        \n        // Track timer start\n        this.trackEvent('unlock_timer_start', { timer_duration: this.config.adUnlockTimer });\n    }\n\n    startUnlockTimer(button, timerId, duration) {\n        if (this.unlockTimers.has(timerId)) {\n            clearInterval(this.unlockTimers.get(timerId));\n        }\n\n        let timeLeft = duration;\n        const textElement = button.querySelector('#unlock-text, .unlock-text') || button;\n        \n        const updateTimer = () => {\n            if (timeLeft > 0) {\n                textElement.textContent = `Please wait ${timeLeft} seconds...`;\n                button.disabled = true;\n                button.classList.add('cursor-not-allowed');\n                button.classList.remove('hover:bg-blue-700', 'bg-blue-600', 'bg-green-600');\n                button.classList.add('bg-gray-400');\n                timeLeft--;\n            } else {\n                this.unlockButton(button, timerId);\n            }\n        };\n\n        updateTimer(); // Initial call\n        const interval = setInterval(updateTimer, 1000);\n        this.unlockTimers.set(timerId, interval);\n    }\n\n    unlockButton(button, timerId) {\n        // Clear the timer\n        if (this.unlockTimers.has(timerId)) {\n            clearInterval(this.unlockTimers.get(timerId));\n            this.unlockTimers.delete(timerId);\n        }\n\n        // Update button appearance\n        button.disabled = false;\n        button.classList.remove('bg-gray-400', 'cursor-not-allowed');\n        button.classList.add('bg-green-600', 'hover:bg-green-700', 'cursor-pointer');\n        \n        const textElement = button.querySelector('#unlock-text, .unlock-text') || button;\n        textElement.innerHTML = '<i class=\"fas fa-play mr-2\"></i>Watch Movie Now';\n        \n        // Add click handler for unlocked button\n        button.onclick = () => this.handleUnlockClick(button, timerId);\n        \n        // Show unlock success animation\n        this.showUnlockAnimation(button);\n        \n        // Track unlock completion\n        this.trackEvent('unlock_timer_complete', { timer_id: timerId });\n    }\n\n    showUnlockAnimation(button) {\n        // Add a brief success animation\n        button.classList.add('animate-pulse');\n        setTimeout(() => {\n            button.classList.remove('animate-pulse');\n        }, 2000);\n        \n        // Show success message\n        const successMsg = document.createElement('div');\n        successMsg.className = 'mt-2 text-green-600 font-medium animate-fade-in';\n        successMsg.innerHTML = '<i class=\"fas fa-check-circle mr-1\"></i>Video is now ready!';\n        button.parentElement?.appendChild(successMsg);\n        \n        setTimeout(() => successMsg.remove(), 3000);\n    }\n\n    handleUnlockClick(button, timerId) {\n        // Track click event\n        this.trackEvent('unlock_button_click', { timer_id: timerId });\n        \n        // Navigate to video page or trigger video load\n        if (window.blogSlug) {\n            window.location.href = `/watch/${window.blogSlug}`;\n        } else if (window.movieSlug) {\n            // Already on watch page, trigger video load\n            if (typeof window.selectVideoSource === 'function') {\n                window.selectVideoSource(0); // Select first available source\n            }\n        }\n    }\n\n    setupAdViewTracking() {\n        // Track when ads come into view\n        const adElements = document.querySelectorAll('.adsbygoogle');\n        \n        if ('IntersectionObserver' in window) {\n            const observer = new IntersectionObserver((entries) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        this.trackAdView(entry.target);\n                    }\n                });\n            }, { threshold: 0.5 });\n\n            adElements.forEach(ad => observer.observe(ad));\n        }\n    }\n\n    trackAdView(adElement) {\n        const adId = adElement.dataset.adSlot || 'unknown';\n        if (this.adViewTracking.has(adId)) return; // Already tracked\n        \n        this.adViewTracking.set(adId, Date.now());\n        this.trackEvent('ad_view', { \n            ad_slot: adId,\n            ad_position: this.getAdPosition(adElement)\n        });\n    }\n\n    getAdPosition(adElement) {\n        if (adElement.closest('#top-banner, .header-ad')) return 'header';\n        if (adElement.closest('#sidebar, .sidebar-ad')) return 'sidebar';\n        if (adElement.closest('#inline, .inline-ad')) return 'inline';\n        if (adElement.closest('#footer, .footer-ad')) return 'footer';\n        return 'unknown';\n    }\n\n    setupAdRefreshSystem() {\n        // Refresh ads periodically to increase revenue\n        if (this.config.adRefreshInterval > 0) {\n            setInterval(() => {\n                if (this.adRefreshCount < this.config.maxAdRefresh) {\n                    this.refreshAds();\n                }\n            }, this.config.adRefreshInterval);\n        }\n    }\n\n    refreshAds() {\n        try {\n            // Only refresh certain ad slots to avoid policy violations\n            const refreshableAds = document.querySelectorAll('.adsbygoogle[data-refresh=\"true\"]');\n            \n            refreshableAds.forEach(ad => {\n                if (ad.dataset.adsbygoogleStatus === 'done') {\n                    // Clear and reinitialize the ad\n                    ad.innerHTML = '';\n                    ad.dataset.adsbygoogleStatus = '';\n                    (window.adsbygoogle = window.adsbygoogle || []).push({});\n                }\n            });\n            \n            this.adRefreshCount++;\n            this.trackEvent('ad_refresh', { refresh_count: this.adRefreshCount });\n            \n            console.log(`Ads refreshed (${this.adRefreshCount}/${this.config.maxAdRefresh})`);\n        } catch (error) {\n            console.warn('Ad refresh failed:', error);\n        }\n    }\n\n    // Create dynamic ad placements\n    createAdPlacement(container, adSlot, adFormat = 'auto', adSize = null) {\n        const adElement = document.createElement('ins');\n        adElement.className = 'adsbygoogle';\n        adElement.style.display = 'block';\n        adElement.dataset.adClient = this.config.adsensePublisherId;\n        adElement.dataset.adSlot = adSlot;\n        adElement.dataset.adFormat = adFormat;\n        \n        if (adSize) {\n            adElement.dataset.adWidth = adSize.width;\n            adElement.dataset.adHeight = adSize.height;\n        } else {\n            adElement.dataset.fullWidthResponsive = 'true';\n        }\n        \n        container.appendChild(adElement);\n        \n        // Push the ad to AdSense\n        try {\n            (window.adsbygoogle = window.adsbygoogle || []).push({});\n        } catch (e) {\n            console.warn('Failed to create ad placement:', e);\n        }\n        \n        return adElement;\n    }\n\n    // Track events for monetization analytics\n    async trackEvent(eventType, data = {}) {\n        try {\n            await axios.post('/api/analytics', {\n                event_type: `monetization_${eventType}`,\n                page_url: window.location.href,\n                blog_id: window.blogId || null,\n                movie_id: window.movieId || null,\n                metadata: JSON.stringify(data)\n            });\n        } catch (error) {\n            console.warn('Failed to track monetization event:', error);\n        }\n    }\n\n    // A/B testing for ad placements\n    runAdPlacementTest() {\n        const testVariant = Math.random() < 0.5 ? 'A' : 'B';\n        \n        if (testVariant === 'A') {\n            // Standard ad placement\n            this.trackEvent('ab_test', { variant: 'A', test_type: 'ad_placement' });\n        } else {\n            // Alternative ad placement (more aggressive)\n            this.createAdditionalAdPlacements();\n            this.trackEvent('ab_test', { variant: 'B', test_type: 'ad_placement' });\n        }\n    }\n\n    createAdditionalAdPlacements() {\n        // Add more ad slots for variant B\n        const contentArea = document.querySelector('main, .main-content, #main');\n        if (contentArea) {\n            const paragraphs = contentArea.querySelectorAll('p');\n            if (paragraphs.length > 3) {\n                // Insert ad after 3rd paragraph\n                const adContainer = document.createElement('div');\n                adContainer.className = 'my-6 text-center';\n                this.createAdPlacement(adContainer, '9876543210', 'rectangle');\n                paragraphs[2].after(adContainer);\n            }\n        }\n    }\n\n    // Revenue optimization methods\n    optimizeAdLayout() {\n        // Adjust ad sizes based on screen size\n        const screenWidth = window.innerWidth;\n        \n        if (screenWidth < 768) {\n            // Mobile optimization\n            this.optimizeForMobile();\n        } else if (screenWidth < 1024) {\n            // Tablet optimization\n            this.optimizeForTablet();\n        } else {\n            // Desktop optimization\n            this.optimizeForDesktop();\n        }\n    }\n\n    optimizeForMobile() {\n        const ads = document.querySelectorAll('.adsbygoogle');\n        ads.forEach(ad => {\n            ad.dataset.adFormat = 'fluid';\n            ad.style.minHeight = '250px';\n        });\n    }\n\n    optimizeForTablet() {\n        const sidebarAds = document.querySelectorAll('.sidebar .adsbygoogle');\n        sidebarAds.forEach(ad => {\n            ad.dataset.adFormat = 'rectangle';\n        });\n    }\n\n    optimizeForDesktop() {\n        const headerAds = document.querySelectorAll('.header .adsbygoogle');\n        headerAds.forEach(ad => {\n            ad.dataset.adFormat = 'leaderboard';\n        });\n    }\n\n    // Anti-ad-blocker detection\n    detectAdBlocker() {\n        const testAd = document.createElement('div');\n        testAd.innerHTML = '&nbsp;';\n        testAd.className = 'adsbox';\n        testAd.style.position = 'absolute';\n        testAd.style.left = '-10000px';\n        document.body.appendChild(testAd);\n        \n        setTimeout(() => {\n            if (testAd.offsetHeight === 0) {\n                this.handleAdBlockerDetected();\n            }\n            testAd.remove();\n        }, 100);\n    }\n\n    handleAdBlockerDetected() {\n        this.trackEvent('adblocker_detected');\n        \n        // Show a polite message about ad blockers\n        const message = document.createElement('div');\n        message.className = 'fixed bottom-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm';\n        message.innerHTML = `\n            <div class=\"flex items-start\">\n                <i class=\"fas fa-info-circle mr-3 mt-1\"></i>\n                <div>\n                    <h4 class=\"font-bold mb-1\">Supporting Free Content</h4>\n                    <p class=\"text-sm\">We notice you might be using an ad blocker. Ads help us keep Doraemon movies free for everyone!</p>\n                    <button onclick=\"this.parentElement.parentElement.parentElement.remove()\" class=\"mt-2 text-xs underline\">Got it</button>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(message);\n        \n        // Auto-remove after 10 seconds\n        setTimeout(() => message.remove(), 10000);\n    }\n\n    // Get monetization statistics\n    async getStats() {\n        try {\n            const response = await axios.get('/api/admin/analytics?type=monetization');\n            return response.data.success ? response.data.stats : null;\n        } catch (error) {\n            console.error('Failed to get monetization stats:', error);\n            return null;\n        }\n    }\n}\n\n// Initialize monetization system when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.monetizationManager = new MonetizationManager();\n    \n    // Run ad blocker detection\n    setTimeout(() => {\n        window.monetizationManager.detectAdBlocker();\n    }, 2000);\n    \n    // Optimize ad layout on resize\n    window.addEventListener('resize', () => {\n        window.monetizationManager.optimizeAdLayout();\n    });\n});\n\n// Global utility functions\nwindow.createAdPlacement = (container, adSlot, adFormat, adSize) => {\n    if (window.monetizationManager) {\n        return window.monetizationManager.createAdPlacement(container, adSlot, adFormat, adSize);\n    }\n};\n\nwindow.trackMonetizationEvent = (eventType, data) => {\n    if (window.monetizationManager) {\n        window.monetizationManager.trackEvent(eventType, data);\n    }\n};