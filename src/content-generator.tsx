// AI Content Generator for Doraemon Movies
export interface MovieContentRequest {\n  movie_title: string;\n  generation_type: 'review' | 'summary' | 'analysis' | 'trivia' | 'complete';\n  release_year?: number;\n  additional_context?: string;\n}\n\nexport interface GeneratedContent {\n  title: string;\n  content: string;\n  excerpt: string;\n  seo_title: string;\n  seo_description: string;\n  seo_keywords: string;\n  featured_image_prompt?: string;\n}\n\nexport class DoraemonContentGenerator {\n  private apiKey: string;\n  private baseUrl: string = 'https://api.openai.com/v1/chat/completions';\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  async generateContent(request: MovieContentRequest): Promise<GeneratedContent> {\n    const prompt = this.buildPrompt(request);\n    \n    try {\n      const response = await this.callOpenAI(prompt);\n      return this.parseResponse(response, request);\n    } catch (error) {\n      console.error('Content generation failed:', error);\n      throw new Error('Failed to generate content. Please try again.');\n    }\n  }\n\n  private buildPrompt(request: MovieContentRequest): string {\n    const baseContext = `You are a professional content writer specializing in anime and Doraemon movies. \nYou create engaging, SEO-optimized blog posts that are informative and entertaining for fans of all ages.\n\nMovie: \"${request.movie_title}\"\nType: ${request.generation_type}\n${request.release_year ? `Release Year: ${request.release_year}` : ''}\n${request.additional_context ? `Additional Context: ${request.additional_context}` : ''}\n\n`;\n\n    switch (request.generation_type) {\n      case 'review':\n        return baseContext + this.getReviewPrompt(request.movie_title);\n      case 'summary':\n        return baseContext + this.getSummaryPrompt(request.movie_title);\n      case 'analysis':\n        return baseContext + this.getAnalysisPrompt(request.movie_title);\n      case 'trivia':\n        return baseContext + this.getTriviaPrompt(request.movie_title);\n      case 'complete':\n        return baseContext + this.getCompletePrompt(request.movie_title);\n      default:\n        return baseContext + this.getReviewPrompt(request.movie_title);\n    }\n  }\n\n  private getReviewPrompt(movieTitle: string): string {\n    return `Write a comprehensive movie review for \"${movieTitle}\". \n\nStructure the review with the following sections:\n1. **Introduction** - Hook the reader with an engaging opening\n2. **Plot Overview** - Brief, spoiler-free summary of the story\n3. **Character Development** - Focus on Nobita, Doraemon, and other key characters\n4. **Animation and Visuals** - Comment on the animation quality and visual style\n5. **Themes and Messages** - Discuss the moral lessons and themes\n6. **Entertainment Value** - Who would enjoy this movie and why\n7. **Final Verdict** - Overall rating and recommendation\n\nRequirements:\n- Write in an enthusiastic but professional tone\n- Include specific details that show knowledge of the Doraemon universe\n- Make it family-friendly and suitable for all ages\n- Include SEO keywords naturally throughout\n- Aim for 800-1200 words\n- Use HTML formatting (h2, h3, p, strong, em tags)\n- End with a call-to-action encouraging viewers to watch\n\nPlease provide ONLY the HTML content without any wrapper text or explanations.`;\n  }\n\n  private getSummaryPrompt(movieTitle: string): string {\n    return `Write a detailed plot summary for the Doraemon movie \"${movieTitle}\".\n\nStructure:\n1. **Setting the Scene** - Where and when the adventure begins\n2. **The Problem** - What challenge or crisis needs to be solved\n3. **The Journey** - Key events and adventures (avoid major spoilers)\n4. **Character Moments** - Important character development and relationships\n5. **The Resolution** - How the story concludes (keep ending vague)\n\nRequirements:\n- Write 600-900 words\n- Focus on the adventure and friendship themes\n- Mention Doraemon's gadgets and their role in the story\n- Keep it spoiler-free for major plot twists\n- Use engaging, descriptive language\n- Include HTML formatting\n- Make readers excited to watch the movie\n\nProvide ONLY the HTML content.`;\n  }\n\n  private getAnalysisPrompt(movieTitle: string): string {\n    return `Write an in-depth character and thematic analysis of \"${movieTitle}\".\n\nAnalyze:\n1. **Character Growth** - How Nobita and friends develop throughout the movie\n2. **Friendship Dynamics** - Relationships between the main characters\n3. **Moral Lessons** - What values and life lessons the movie teaches\n4. **Cultural Context** - Any cultural references or Japanese values presented\n5. **Symbolism** - Deeper meanings behind key scenes or elements\n6. **Comparison** - How this movie fits within the broader Doraemon series\n\nRequirements:\n- 700-1000 words\n- Academic yet accessible writing style\n- Include specific examples from the movie\n- Discuss both entertainment and educational value\n- HTML formatted with proper headings\n- Suitable for parents and educators\n\nProvide ONLY the HTML content.`;\n  }\n\n  private getTriviaPrompt(movieTitle: string): string {\n    return `Create an engaging trivia and behind-the-scenes article about \"${movieTitle}\".\n\nInclude sections on:\n1. **Production Facts** - Interesting details about how the movie was made\n2. **Voice Cast** - Information about the voice actors (both Japanese and English if applicable)\n3. **Animation Techniques** - Special animation methods or technologies used\n4. **Cultural References** - Japanese cultural elements featured in the movie\n5. **Box Office and Reception** - How the movie performed commercially and critically\n6. **Fun Facts** - Interesting trivia that fans would enjoy\n7. **Legacy** - The movie's impact on the Doraemon franchise\n\nRequirements:\n- 500-800 words\n- Present information in an entertaining, list-like format\n- Include numbers, dates, and specific details where possible\n- Write for both casual viewers and dedicated fans\n- HTML formatted with bullet points and sections\n- Include a 'Did You Know?' style approach\n\nProvide ONLY the HTML content.`;\n  }\n\n  private getCompletePrompt(movieTitle: string): string {\n    return `Create a comprehensive blog post about \"${movieTitle}\" that combines review, summary, and trivia.\n\nStructure:\n1. **Introduction** - Engaging hook and movie overview\n2. **Plot Summary** - Spoiler-free story outline\n3. **Review and Analysis** - Critical assessment of the movie\n4. **Character Spotlight** - Focus on main characters\n5. **Themes and Messages** - Educational and moral content\n6. **Behind the Scenes** - Production trivia and facts\n7. **Why You Should Watch** - Compelling reasons to view the movie\n8. **Conclusion** - Final thoughts and call-to-action\n\nRequirements:\n- 1200-1500 words total\n- Balance entertainment with information\n- Include multiple HTML headings and sections\n- Optimize for search engines naturally\n- Family-friendly tone throughout\n- Include specific Doraemon universe references\n- End with encouragement to watch and share\n\nProvide ONLY the HTML content.`;\n  }\n\n  private async callOpenAI(prompt: string): Promise<string> {\n    const response = await fetch(this.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert content writer for anime and family entertainment websites. You create engaging, SEO-optimized content that is both informative and entertaining.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 2500,\n        temperature: 0.7,\n        top_p: 1,\n        frequency_penalty: 0.2,\n        presence_penalty: 0.1\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.choices || data.choices.length === 0) {\n      throw new Error('No content generated from OpenAI');\n    }\n\n    return data.choices[0].message.content.trim();\n  }\n\n  private parseResponse(content: string, request: MovieContentRequest): GeneratedContent {\n    // Extract title from content or generate one\n    const titleMatch = content.match(/<h1[^>]*>([^<]+)<\\/h1>/) || content.match(/<h2[^>]*>([^<]+)<\\/h2>/);\n    const extractedTitle = titleMatch ? titleMatch[1].replace(/[*#]/g, '').trim() : null;\n    \n    const title = extractedTitle || this.generateTitle(request.movie_title, request.generation_type);\n    \n    // Generate excerpt from first paragraph\n    const excerptMatch = content.match(/<p[^>]*>([^<]+)<\\/p>/);\n    const excerpt = excerptMatch ? \n      this.truncateText(excerptMatch[1].replace(/[*]/g, '').trim(), 160) :\n      this.generateExcerpt(request.movie_title, request.generation_type);\n\n    // Generate SEO metadata\n    const seoTitle = this.generateSEOTitle(request.movie_title, request.generation_type);\n    const seoDescription = this.generateSEODescription(request.movie_title, request.generation_type, excerpt);\n    const seoKeywords = this.generateSEOKeywords(request.movie_title, request.generation_type);\n\n    return {\n      title,\n      content: this.cleanContent(content),\n      excerpt,\n      seo_title: seoTitle,\n      seo_description: seoDescription,\n      seo_keywords: seoKeywords,\n      featured_image_prompt: this.generateImagePrompt(request.movie_title)\n    };\n  }\n\n  private generateTitle(movieTitle: string, type: string): string {\n    const templates = {\n      review: `${movieTitle} - Complete Movie Review and Analysis`,\n      summary: `${movieTitle} - Plot Summary and Story Guide`,\n      analysis: `${movieTitle} - Character Analysis and Themes`,\n      trivia: `${movieTitle} - Behind the Scenes Facts and Trivia`,\n      complete: `${movieTitle} - Complete Guide, Review and Analysis`\n    };\n    \n    return templates[type as keyof typeof templates] || `${movieTitle} - Complete Review`;\n  }\n\n  private generateExcerpt(movieTitle: string, type: string): string {\n    const excerpts = {\n      review: `Discover everything you need to know about ${movieTitle} in our comprehensive movie review. We explore the plot, characters, animation, and themes that make this Doraemon adventure special.`,\n      summary: `Get a detailed plot summary of ${movieTitle} without major spoilers. Follow Nobita and Doraemon on their latest adventure filled with friendship, gadgets, and life lessons.`,\n      analysis: `Dive deep into the characters and themes of ${movieTitle}. Explore how this Doraemon movie teaches important values while entertaining audiences of all ages.`,\n      trivia: `Uncover fascinating behind-the-scenes facts about ${movieTitle}. Learn about the production, voice cast, animation techniques, and cultural references in this Doraemon film.`,\n      complete: `Your ultimate guide to ${movieTitle}. Everything you need to know about this beloved Doraemon movie including plot, characters, themes, and production insights.`\n    };\n    \n    return excerpts[type as keyof typeof excerpts] || `A comprehensive look at the beloved Doraemon movie ${movieTitle}.`;\n  }\n\n  private generateSEOTitle(movieTitle: string, type: string): string {\n    const year = new Date().getFullYear();\n    const templates = {\n      review: `${movieTitle} Review ${year} - Watch Free Online | Doraemon Movies`,\n      summary: `${movieTitle} Plot Summary ${year} - Free Streaming | Doraemon Guide`,\n      analysis: `${movieTitle} Analysis ${year} - Character Study | Doraemon Themes`,\n      trivia: `${movieTitle} Facts ${year} - Behind Scenes | Doraemon Trivia`,\n      complete: `${movieTitle} ${year} - Complete Guide, Review & Watch Free Online`\n    };\n    \n    return templates[type as keyof typeof templates] || `${movieTitle} - Watch Free Online | Doraemon Movies ${year}`;\n  }\n\n  private generateSEODescription(movieTitle: string, type: string, excerpt: string): string {\n    const baseDescription = excerpt.length > 150 ? excerpt.substring(0, 147) + '...' : excerpt;\n    return `${baseDescription} Watch ${movieTitle} free online in HD quality. Stream now on our Doraemon movie platform.`;\n  }\n\n  private generateSEOKeywords(movieTitle: string, type: string): string {\n    const baseKeywords = [\n      movieTitle.toLowerCase(),\n      'doraemon',\n      'movie',\n      'watch online',\n      'free',\n      'streaming',\n      'anime',\n      'nobita',\n      'family movie',\n      'japanese animation'\n    ];\n\n    const typeKeywords = {\n      review: ['review', 'rating', 'critic', 'analysis'],\n      summary: ['plot', 'summary', 'story', 'synopsis'],\n      analysis: ['character analysis', 'themes', 'lessons', 'meaning'],\n      trivia: ['trivia', 'facts', 'behind scenes', 'production'],\n      complete: ['guide', 'complete', 'everything', 'comprehensive']\n    };\n\n    const additional = typeKeywords[type as keyof typeof typeKeywords] || ['entertainment'];\n    return [...baseKeywords, ...additional].join(', ');\n  }\n\n  private generateImagePrompt(movieTitle: string): string {\n    return `High-quality anime-style illustration of Doraemon and Nobita from the movie \"${movieTitle}\", colorful and family-friendly, suitable for blog featured image`;\n  }\n\n  private cleanContent(content: string): string {\n    // Remove any unwanted characters or formatting\n    return content\n      .replace(/\\*\\*/g, '') // Remove markdown bold\n      .replace(/\\*/g, '') // Remove markdown emphasis\n      .replace(/###? /g, '') // Remove markdown headers that weren't converted\n      .trim();\n  }\n\n  private truncateText(text: string, maxLength: number): string {\n    if (text.length <= maxLength) return text;\n    \n    const truncated = text.substring(0, maxLength);\n    const lastSpace = truncated.lastIndexOf(' ');\n    \n    return lastSpace > 0 ? truncated.substring(0, lastSpace) + '...' : truncated + '...';\n  }\n\n  // Batch generation for multiple movies\n  async generateBatchContent(movies: { title: string; slug: string; id: number }[]): Promise<{\n    success: { movie_id: number; content: GeneratedContent }[];\n    errors: { movie_id: number; error: string }[];\n  }> {\n    const results = {\n      success: [] as { movie_id: number; content: GeneratedContent }[],\n      errors: [] as { movie_id: number; error: string }[]\n    };\n\n    for (const movie of movies) {\n      try {\n        const content = await this.generateContent({\n          movie_title: movie.title,\n          generation_type: 'complete'\n        });\n        \n        results.success.push({\n          movie_id: movie.id,\n          content\n        });\n        \n        // Add delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        results.errors.push({\n          movie_id: movie.id,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  // Search engine integration for movie information\n  async searchMovieInfo(movieTitle: string, searchEngineId?: string, apiKey?: string): Promise<{\n    title: string;\n    year?: number;\n    description?: string;\n    imageUrl?: string;\n    additionalContext?: string;\n  }> {\n    if (!searchEngineId || !apiKey) {\n      // Return basic info if search is not configured\n      return {\n        title: movieTitle,\n        description: `Information about the Doraemon movie: ${movieTitle}`,\n        additionalContext: 'No additional search data available'\n      };\n    }\n\n    try {\n      const searchUrl = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(movieTitle + ' doraemon movie')}&cx=${searchEngineId}&key=${apiKey}&searchType=image&num=3`;\n      \n      const response = await fetch(searchUrl);\n      const data = await response.json();\n      \n      if (data.items && data.items.length > 0) {\n        const item = data.items[0];\n        return {\n          title: movieTitle,\n          description: item.snippet || `Doraemon movie: ${movieTitle}`,\n          imageUrl: item.link,\n          additionalContext: `Search found: ${item.title || movieTitle}`\n        };\n      }\n      \n      return {\n        title: movieTitle,\n        description: `Doraemon movie: ${movieTitle}`,\n        additionalContext: 'Search completed but no specific results found'\n      };\n    } catch (error) {\n      console.error('Search error:', error);\n      return {\n        title: movieTitle,\n        description: `Doraemon movie: ${movieTitle}`,\n        additionalContext: 'Search service unavailable'\n      };\n    }\n  }\n}\n\n// Export utility functions for direct use\nexport const generateSlugFromTitle = (title: string): string => {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Remove duplicate hyphens\n    .trim('-'); // Remove leading/trailing hyphens\n};\n\nexport const validateMovieTitle = (title: string): boolean => {\n  return title.length >= 3 && title.length <= 200 && /^[a-zA-Z0-9\\s:.-]+$/.test(title);\n};\n\nexport const estimateReadingTime = (content: string): number => {\n  const wordsPerMinute = 200;\n  const wordCount = content.replace(/<[^>]*>/g, '').split(/\\s+/).length;\n  return Math.ceil(wordCount / wordsPerMinute);\n};