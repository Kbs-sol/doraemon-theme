#!/bin/bash\n\n# Doraemon Movies Website - Comprehensive Deployment Script\n# This script handles the complete deployment process to Cloudflare Pages\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nPROJECT_NAME=\"doraemon-movies\"\nDATABASE_NAME=\"doraemon-production\"\nPREVIEW_DATABASE_NAME=\"doraemon-preview\"\n\necho -e \"${BLUE}ü§ñ Doraemon Movies Deployment Script${NC}\"\necho -e \"${BLUE}=====================================${NC}\\n\"\n\n# Function to print colored messages\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Check prerequisites\nprint_status \"Checking prerequisites...\"\n\nif ! command_exists node; then\n    print_error \"Node.js is not installed. Please install Node.js first.\"\n    exit 1\nfi\n\nif ! command_exists npm; then\n    print_error \"npm is not installed. Please install npm first.\"\n    exit 1\nfi\n\nif ! command_exists wrangler; then\n    print_warning \"Wrangler CLI not found. Installing...\"\n    npm install -g wrangler\nfi\n\n# Check if logged into Wrangler\nif ! wrangler whoami >/dev/null 2>&1; then\n    print_warning \"Not logged into Wrangler. Please log in:\"\n    wrangler auth login\nfi\n\nprint_status \"Prerequisites check completed ‚úÖ\"\n\n# Install dependencies\nprint_status \"Installing dependencies...\"\nnpm install\n\n# Environment setup\nprint_status \"Setting up environment...\"\n\nif [ ! -f \".env\" ]; then\n    print_warning \".env file not found. Creating from example...\"\n    cp .env.example .env\n    print_warning \"Please edit .env file with your actual values before continuing.\"\n    read -p \"Press Enter to continue after editing .env file...\"\nfi\n\n# Database setup\nprint_status \"Setting up Cloudflare D1 databases...\"\n\n# Create production database\nif ! wrangler d1 list | grep -q \"$DATABASE_NAME\"; then\n    print_status \"Creating production database: $DATABASE_NAME\"\n    wrangler d1 create \"$DATABASE_NAME\"\n    print_warning \"Please update the database_id in wrangler.jsonc with the ID from the output above.\"\n    read -p \"Press Enter after updating wrangler.jsonc...\"\nelse\n    print_status \"Production database already exists ‚úÖ\"\nfi\n\n# Create preview database\nif ! wrangler d1 list | grep -q \"$PREVIEW_DATABASE_NAME\"; then\n    print_status \"Creating preview database: $PREVIEW_DATABASE_NAME\"\n    wrangler d1 create \"$PREVIEW_DATABASE_NAME\"\n    print_warning \"Please update the preview_database_id in wrangler.jsonc with the ID from the output above.\"\n    read -p \"Press Enter after updating wrangler.jsonc...\"\nelse\n    print_status \"Preview database already exists ‚úÖ\"\nfi\n\n# Apply database migrations\nprint_status \"Applying database migrations...\"\nwrangler d1 migrations apply \"$DATABASE_NAME\" || {\n    print_error \"Failed to apply migrations to production database\"\n    exit 1\n}\n\n# Apply migrations to preview database\nwrangler d1 migrations apply \"$PREVIEW_DATABASE_NAME\" || {\n    print_warning \"Failed to apply migrations to preview database (this might be expected)\"\n}\n\n# Seed database with sample data\nread -p \"Do you want to seed the database with sample data? (y/n): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    print_status \"Seeding database with sample data...\"\n    wrangler d1 execute \"$DATABASE_NAME\" --file=./seed.sql\nfi\n\n# Build the application\nprint_status \"Building application...\"\nnpm run build || {\n    print_error \"Build failed!\"\n    exit 1\n}\n\n# Create Cloudflare Pages project if it doesn't exist\nprint_status \"Setting up Cloudflare Pages project...\"\n\nif ! wrangler pages project list | grep -q \"$PROJECT_NAME\"; then\n    print_status \"Creating Cloudflare Pages project: $PROJECT_NAME\"\n    wrangler pages project create \"$PROJECT_NAME\" --compatibility-date=2024-01-01 --compatibility-flags=\"nodejs_compat\"\nelse\n    print_status \"Cloudflare Pages project already exists ‚úÖ\"\nfi\n\n# Set environment variables\nprint_status \"Setting up environment variables...\"\n\n# Function to set environment variable if it exists in .env\nset_env_var() {\n    local var_name=\"$1\"\n    local var_value=$(grep \"^$var_name=\" .env 2>/dev/null | cut -d '=' -f2- | sed 's/^\"\\|\"$//g')\n    \n    if [ -n \"$var_value\" ] && [ \"$var_value\" != \"your_${var_name,,}_here\" ]; then\n        print_status \"Setting environment variable: $var_name\"\n        echo \"$var_value\" | wrangler pages secret put \"$var_name\" --project-name=\"$PROJECT_NAME\" || {\n            print_warning \"Failed to set $var_name (this might be expected for public variables)\"\n        }\n    fi\n}\n\n# Set sensitive environment variables as secrets\nset_env_var \"TELEGRAM_BOT_TOKEN\"\nset_env_var \"OPENAI_API_KEY\"\nset_env_var \"SEARCH_API_KEY\"\nset_env_var \"JWT_SECRET\"\nset_env_var \"ADMIN_PASSWORD\"\n\n# Deploy to Cloudflare Pages\nprint_status \"Deploying to Cloudflare Pages...\"\nwrangler pages deploy dist --project-name=\"$PROJECT_NAME\" --compatibility-date=2024-01-01 || {\n    print_error \"Deployment failed!\"\n    exit 1\n}\n\n# Setup custom domain (optional)\nread -p \"Do you want to setup a custom domain? (y/n): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    read -p \"Enter your custom domain (e.g., doraemonmovies.com): \" CUSTOM_DOMAIN\n    if [ -n \"$CUSTOM_DOMAIN\" ]; then\n        print_status \"Setting up custom domain: $CUSTOM_DOMAIN\"\n        wrangler pages domain add \"$CUSTOM_DOMAIN\" --project-name=\"$PROJECT_NAME\" || {\n            print_warning \"Failed to add custom domain. You can add it manually in the Cloudflare dashboard.\"\n        }\n    fi\nfi\n\n# Post-deployment setup\nprint_status \"Running post-deployment setup...\"\n\n# Get the deployment URL\nDEPLOYMENT_URL=$(wrangler pages project list | grep \"$PROJECT_NAME\" | awk '{print $2}' | head -1)\n\nif [ -z \"$DEPLOYMENT_URL\" ]; then\n    DEPLOYMENT_URL=\"https://$PROJECT_NAME.pages.dev\"\nfi\n\nprint_status \"Testing deployment...\"\n\n# Test the deployment\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" \"$DEPLOYMENT_URL\" || echo \"000\")\n\nif [ \"$HTTP_STATUS\" = \"200\" ]; then\n    print_status \"Deployment test successful ‚úÖ\"\nelse\n    print_warning \"Deployment might not be ready yet (HTTP $HTTP_STATUS). Please check manually.\"\nfi\n\n# Setup Telegram webhook (if bot token is provided)\nif grep -q \"^TELEGRAM_BOT_TOKEN=\" .env && ! grep -q \"your_bot_token_here\" .env; then\n    print_status \"Setting up Telegram webhook...\"\n    TELEGRAM_BOT_TOKEN=$(grep \"^TELEGRAM_BOT_TOKEN=\" .env | cut -d '=' -f2- | sed 's/^\"\\|\"$//g')\n    WEBHOOK_URL=\"$DEPLOYMENT_URL/api/telegram/webhook\"\n    \n    curl -s \"https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/setWebhook?url=$WEBHOOK_URL\" >/dev/null || {\n        print_warning \"Failed to set Telegram webhook. You can set it manually.\"\n    }\nfi\n\n# Generate deployment report\nprint_status \"Generating deployment report...\"\n\ncat << EOF > deployment-report.txt\nDoraemon Movies Deployment Report\n================================\nDate: $(date)\nProject: $PROJECT_NAME\nDeployment URL: $DEPLOYMENT_URL\n\nDatabase Configuration:\n- Production DB: $DATABASE_NAME\n- Preview DB: $PREVIEW_DATABASE_NAME\n\nFeatures Deployed:\n‚úÖ Admin Panel with CRUD operations\n‚úÖ Telegram Bot integration\n‚úÖ AI Content Generation\n‚úÖ Advanced Analytics\n‚úÖ Enhanced Monetization\n‚úÖ SEO Optimization\n‚úÖ Secure Video Streaming\n\nNext Steps:\n1. Test all functionality at: $DEPLOYMENT_URL\n2. Configure AdSense in admin panel\n3. Add movies and generate content\n4. Monitor analytics and performance\n5. Set up custom domain if needed\n\nAdmin Access:\n- URL: $DEPLOYMENT_URL/admin\n- Default credentials are in your .env file\n- Change default credentials immediately!\n\nImportant Security Notes:\n- Update default admin credentials\n- Configure all API keys properly\n- Enable security headers\n- Monitor access logs\n\nSupport:\n- Documentation: See README.md\n- Issues: Check deployment logs in Cloudflare dashboard\nEOF\n\nprint_status \"\\nüéâ Deployment completed successfully!\"\nprint_status \"üìä Deployment report saved to: deployment-report.txt\"\nprint_status \"üåê Your site is available at: $DEPLOYMENT_URL\"\nprint_status \"‚öôÔ∏è  Admin panel: $DEPLOYMENT_URL/admin\"\n\nprint_warning \"\\n‚ö†Ô∏è  Important Security Steps:\"\nprint_warning \"1. Change default admin credentials immediately\"\nprint_warning \"2. Configure all API keys in Cloudflare Pages environment variables\"\nprint_warning \"3. Test all integrations thoroughly\"\nprint_warning \"4. Monitor logs and analytics\"\n\necho -e \"\\n${GREEN}üöÄ Happy streaming with Doraemon! ${NC}\"\n\n# Cleanup\nread -p \"Do you want to clean up build files? (y/n): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    print_status \"Cleaning up...\"\n    rm -rf dist node_modules/.cache\nfi\n\necho -e \"\\n${BLUE}Deployment script completed!${NC}\"